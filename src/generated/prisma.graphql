# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Change implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  author(where: UserWhereInput): User!
  project(where: ProjectWhereInput): Project!
}

type Project implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  member(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  admin(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  change(where: ChangeWhereInput, orderBy: ChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Change!]
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  projectMember(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  projectAdmin(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
}


#
# Other Types
#

type AggregateChange {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type ChangeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ChangeEdge]!
  aggregate: AggregateChange!
}

input ChangeCreateInput {
  text: String!
  author: UserCreateOneInput!
  project: ProjectCreateOneWithoutChangeInput!
}

input ChangeCreateManyWithoutProjectInput {
  create: [ChangeCreateWithoutProjectInput!]
  connect: [ChangeWhereUniqueInput!]
}

input ChangeCreateWithoutProjectInput {
  text: String!
  author: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type ChangeEdge {
  """
  The item at the end of the edge.
  """
  node: Change!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ChangeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  text_ASC
  text_DESC
}

type ChangePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
}

type ChangeSubscriptionPayload {
  mutation: MutationType!
  node: Change
  updatedFields: [String!]
  previousValues: ChangePreviousValues
}

input ChangeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ChangeSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ChangeSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChangeWhereInput
}

input ChangeUpdateInput {
  text: String
  author: UserUpdateOneInput
  project: ProjectUpdateOneWithoutChangeInput
}

input ChangeUpdateManyWithoutProjectInput {
  create: [ChangeCreateWithoutProjectInput!]
  connect: [ChangeWhereUniqueInput!]
  disconnect: [ChangeWhereUniqueInput!]
  delete: [ChangeWhereUniqueInput!]
  update: [ChangeUpdateWithoutProjectInput!]
  upsert: [ChangeUpsertWithoutProjectInput!]
}

input ChangeUpdateWithoutProjectDataInput {
  text: String
  author: UserUpdateOneInput
}

input ChangeUpdateWithoutProjectInput {
  where: ChangeWhereUniqueInput!
  data: ChangeUpdateWithoutProjectDataInput!
}

input ChangeUpsertWithoutProjectInput {
  where: ChangeWhereUniqueInput!
  update: ChangeUpdateWithoutProjectDataInput!
  create: ChangeCreateWithoutProjectInput!
}

input ChangeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ChangeWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ChangeWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  author: UserWhereInput
  project: ProjectWhereInput
}

input ChangeWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createProject(data: ProjectCreateInput!): Project!
  createChange(data: ChangeCreateInput!): Change!
  createUser(data: UserCreateInput!): User!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateChange(data: ChangeUpdateInput!, where: ChangeWhereUniqueInput!): Change
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteChange(where: ChangeWhereUniqueInput!): Change
  deleteUser(where: UserWhereUniqueInput!): User
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertChange(where: ChangeWhereUniqueInput!, create: ChangeCreateInput!, update: ChangeUpdateInput!): Change!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput!): BatchPayload!
  updateManyChanges(data: ChangeUpdateInput!, where: ChangeWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput!): BatchPayload!
  deleteManyChanges(where: ChangeWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type ProjectConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String!
  member: UserCreateManyWithoutProjectMemberInput
  admin: UserCreateManyWithoutProjectAdminInput
  change: ChangeCreateManyWithoutProjectInput
}

input ProjectCreateManyWithoutAdminInput {
  create: [ProjectCreateWithoutAdminInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutMemberInput {
  create: [ProjectCreateWithoutMemberInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutChangeInput {
  create: ProjectCreateWithoutChangeInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutAdminInput {
  name: String!
  member: UserCreateManyWithoutProjectMemberInput
  change: ChangeCreateManyWithoutProjectInput
}

input ProjectCreateWithoutChangeInput {
  name: String!
  member: UserCreateManyWithoutProjectMemberInput
  admin: UserCreateManyWithoutProjectAdminInput
}

input ProjectCreateWithoutMemberInput {
  name: String!
  admin: UserCreateManyWithoutProjectAdminInput
  change: ChangeCreateManyWithoutProjectInput
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  The item at the end of the edge.
  """
  node: Project!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type ProjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProjectSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ProjectSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  name: String
  member: UserUpdateManyWithoutProjectMemberInput
  admin: UserUpdateManyWithoutProjectAdminInput
  change: ChangeUpdateManyWithoutProjectInput
}

input ProjectUpdateManyWithoutAdminInput {
  create: [ProjectCreateWithoutAdminInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithoutAdminInput!]
  upsert: [ProjectUpsertWithoutAdminInput!]
}

input ProjectUpdateManyWithoutMemberInput {
  create: [ProjectCreateWithoutMemberInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithoutMemberInput!]
  upsert: [ProjectUpsertWithoutMemberInput!]
}

input ProjectUpdateOneWithoutChangeInput {
  create: ProjectCreateWithoutChangeInput
  connect: ProjectWhereUniqueInput
  disconnect: ProjectWhereUniqueInput
  delete: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutChangeInput
  upsert: ProjectUpsertWithoutChangeInput
}

input ProjectUpdateWithoutAdminDataInput {
  name: String
  member: UserUpdateManyWithoutProjectMemberInput
  change: ChangeUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutAdminInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutAdminDataInput!
}

input ProjectUpdateWithoutChangeDataInput {
  name: String
  member: UserUpdateManyWithoutProjectMemberInput
  admin: UserUpdateManyWithoutProjectAdminInput
}

input ProjectUpdateWithoutChangeInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutChangeDataInput!
}

input ProjectUpdateWithoutMemberDataInput {
  name: String
  admin: UserUpdateManyWithoutProjectAdminInput
  change: ChangeUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutMemberInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutMemberDataInput!
}

input ProjectUpsertWithoutAdminInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutAdminDataInput!
  create: ProjectCreateWithoutAdminInput!
}

input ProjectUpsertWithoutChangeInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutChangeDataInput!
  create: ProjectCreateWithoutChangeInput!
}

input ProjectUpsertWithoutMemberInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutMemberDataInput!
  create: ProjectCreateWithoutMemberInput!
}

input ProjectWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProjectWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ProjectWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  member_every: UserWhereInput
  member_some: UserWhereInput
  member_none: UserWhereInput
  admin_every: UserWhereInput
  admin_some: UserWhereInput
  admin_none: UserWhereInput
  change_every: ChangeWhereInput
  change_some: ChangeWhereInput
  change_none: ChangeWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  changes(where: ChangeWhereInput, orderBy: ChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Change]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  project(where: ProjectWhereUniqueInput!): Project
  change(where: ChangeWhereUniqueInput!): Change
  user(where: UserWhereUniqueInput!): User
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  changesConnection(where: ChangeWhereInput, orderBy: ChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChangeConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  change(where: ChangeSubscriptionWhereInput): ChangeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  projectMember: ProjectCreateManyWithoutMemberInput
  projectAdmin: ProjectCreateManyWithoutAdminInput
}

input UserCreateManyWithoutProjectAdminInput {
  create: [UserCreateWithoutProjectAdminInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutProjectMemberInput {
  create: [UserCreateWithoutProjectMemberInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProjectAdminInput {
  email: String!
  password: String!
  name: String!
  projectMember: ProjectCreateManyWithoutMemberInput
}

input UserCreateWithoutProjectMemberInput {
  email: String!
  password: String!
  name: String!
  projectAdmin: ProjectCreateManyWithoutAdminInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  projectMember: ProjectUpdateManyWithoutMemberInput
  projectAdmin: ProjectUpdateManyWithoutAdminInput
}

input UserUpdateManyWithoutProjectAdminInput {
  create: [UserCreateWithoutProjectAdminInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutProjectAdminInput!]
  upsert: [UserUpsertWithoutProjectAdminInput!]
}

input UserUpdateManyWithoutProjectMemberInput {
  create: [UserCreateWithoutProjectMemberInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutProjectMemberInput!]
  upsert: [UserUpsertWithoutProjectMemberInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
}

input UserUpdateWithoutProjectAdminDataInput {
  email: String
  password: String
  name: String
  projectMember: ProjectUpdateManyWithoutMemberInput
}

input UserUpdateWithoutProjectAdminInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProjectAdminDataInput!
}

input UserUpdateWithoutProjectMemberDataInput {
  email: String
  password: String
  name: String
  projectAdmin: ProjectUpdateManyWithoutAdminInput
}

input UserUpdateWithoutProjectMemberInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProjectMemberDataInput!
}

input UserUpsertWithoutProjectAdminInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProjectAdminDataInput!
  create: UserCreateWithoutProjectAdminInput!
}

input UserUpsertWithoutProjectMemberInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProjectMemberDataInput!
  create: UserCreateWithoutProjectMemberInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  projectMember_every: ProjectWhereInput
  projectMember_some: ProjectWhereInput
  projectMember_none: ProjectWhereInput
  projectAdmin_every: ProjectWhereInput
  projectAdmin_some: ProjectWhereInput
  projectAdmin_none: ProjectWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
