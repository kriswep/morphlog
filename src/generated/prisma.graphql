# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Change implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  author(where: UserWhereInput): User!
  project(where: ProjectWhereInput): Project!
}

type Project implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  team(where: TeamWhereInput): Team!
  member(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  admin(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  change(where: ChangeWhereInput, orderBy: ChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Change!]
}

type Team implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  project(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  owner(where: UserWhereInput): User!
  admin(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  member(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  TeamOwner(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  TeamAdmin(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  TeamMember(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  projectMember(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  projectAdmin(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
}


#
# Other Types
#

type AggregateChange {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type ChangeConnection {
  pageInfo: PageInfo!
  edges: [ChangeEdge]!
  aggregate: AggregateChange!
}

input ChangeCreateInput {
  text: String!
  author: UserCreateOneInput!
  project: ProjectCreateOneWithoutChangeInput!
}

input ChangeCreateManyWithoutProjectInput {
  create: [ChangeCreateWithoutProjectInput!]
  connect: [ChangeWhereUniqueInput!]
}

input ChangeCreateWithoutProjectInput {
  text: String!
  author: UserCreateOneInput!
}

type ChangeEdge {
  node: Change!
  cursor: String!
}

enum ChangeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  text_ASC
  text_DESC
}

type ChangePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
}

type ChangeSubscriptionPayload {
  mutation: MutationType!
  node: Change
  updatedFields: [String!]
  previousValues: ChangePreviousValues
}

input ChangeSubscriptionWhereInput {
  AND: [ChangeSubscriptionWhereInput!]
  OR: [ChangeSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChangeWhereInput
}

input ChangeUpdateInput {
  text: String
  author: UserUpdateOneInput
  project: ProjectUpdateOneWithoutChangeInput
}

input ChangeUpdateManyWithoutProjectInput {
  create: [ChangeCreateWithoutProjectInput!]
  connect: [ChangeWhereUniqueInput!]
  disconnect: [ChangeWhereUniqueInput!]
  delete: [ChangeWhereUniqueInput!]
  update: [ChangeUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [ChangeUpsertWithWhereUniqueWithoutProjectInput!]
}

input ChangeUpdateWithoutProjectDataInput {
  text: String
  author: UserUpdateOneInput
}

input ChangeUpdateWithWhereUniqueWithoutProjectInput {
  where: ChangeWhereUniqueInput!
  data: ChangeUpdateWithoutProjectDataInput!
}

input ChangeUpsertWithWhereUniqueWithoutProjectInput {
  where: ChangeWhereUniqueInput!
  update: ChangeUpdateWithoutProjectDataInput!
  create: ChangeCreateWithoutProjectInput!
}

input ChangeWhereInput {
  AND: [ChangeWhereInput!]
  OR: [ChangeWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserWhereInput
  project: ProjectWhereInput
}

input ChangeWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createProject(data: ProjectCreateInput!): Project!
  createChange(data: ChangeCreateInput!): Change!
  createUser(data: UserCreateInput!): User!
  createTeam(data: TeamCreateInput!): Team!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateChange(data: ChangeUpdateInput!, where: ChangeWhereUniqueInput!): Change
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteChange(where: ChangeWhereUniqueInput!): Change
  deleteUser(where: UserWhereUniqueInput!): User
  deleteTeam(where: TeamWhereUniqueInput!): Team
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertChange(where: ChangeWhereUniqueInput!, create: ChangeCreateInput!, update: ChangeUpdateInput!): Change!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput): BatchPayload!
  updateManyChanges(data: ChangeUpdateInput!, where: ChangeWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyTeams(data: TeamUpdateInput!, where: TeamWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyChanges(where: ChangeWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String!
  team: TeamCreateOneWithoutProjectInput!
  member: UserCreateManyWithoutProjectMemberInput
  admin: UserCreateManyWithoutProjectAdminInput
  change: ChangeCreateManyWithoutProjectInput
}

input ProjectCreateManyWithoutAdminInput {
  create: [ProjectCreateWithoutAdminInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutMemberInput {
  create: [ProjectCreateWithoutMemberInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutTeamInput {
  create: [ProjectCreateWithoutTeamInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutChangeInput {
  create: ProjectCreateWithoutChangeInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutAdminInput {
  name: String!
  team: TeamCreateOneWithoutProjectInput!
  member: UserCreateManyWithoutProjectMemberInput
  change: ChangeCreateManyWithoutProjectInput
}

input ProjectCreateWithoutChangeInput {
  name: String!
  team: TeamCreateOneWithoutProjectInput!
  member: UserCreateManyWithoutProjectMemberInput
  admin: UserCreateManyWithoutProjectAdminInput
}

input ProjectCreateWithoutMemberInput {
  name: String!
  team: TeamCreateOneWithoutProjectInput!
  admin: UserCreateManyWithoutProjectAdminInput
  change: ChangeCreateManyWithoutProjectInput
}

input ProjectCreateWithoutTeamInput {
  name: String!
  member: UserCreateManyWithoutProjectMemberInput
  admin: UserCreateManyWithoutProjectAdminInput
  change: ChangeCreateManyWithoutProjectInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type ProjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  name: String
  team: TeamUpdateOneWithoutProjectInput
  member: UserUpdateManyWithoutProjectMemberInput
  admin: UserUpdateManyWithoutProjectAdminInput
  change: ChangeUpdateManyWithoutProjectInput
}

input ProjectUpdateManyWithoutAdminInput {
  create: [ProjectCreateWithoutAdminInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutAdminInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutAdminInput!]
}

input ProjectUpdateManyWithoutMemberInput {
  create: [ProjectCreateWithoutMemberInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutMemberInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutMemberInput!]
}

input ProjectUpdateManyWithoutTeamInput {
  create: [ProjectCreateWithoutTeamInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutTeamInput!]
}

input ProjectUpdateOneWithoutChangeInput {
  create: ProjectCreateWithoutChangeInput
  connect: ProjectWhereUniqueInput
  delete: Boolean
  update: ProjectUpdateWithoutChangeDataInput
  upsert: ProjectUpsertWithoutChangeInput
}

input ProjectUpdateWithoutAdminDataInput {
  name: String
  team: TeamUpdateOneWithoutProjectInput
  member: UserUpdateManyWithoutProjectMemberInput
  change: ChangeUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutChangeDataInput {
  name: String
  team: TeamUpdateOneWithoutProjectInput
  member: UserUpdateManyWithoutProjectMemberInput
  admin: UserUpdateManyWithoutProjectAdminInput
}

input ProjectUpdateWithoutMemberDataInput {
  name: String
  team: TeamUpdateOneWithoutProjectInput
  admin: UserUpdateManyWithoutProjectAdminInput
  change: ChangeUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutTeamDataInput {
  name: String
  member: UserUpdateManyWithoutProjectMemberInput
  admin: UserUpdateManyWithoutProjectAdminInput
  change: ChangeUpdateManyWithoutProjectInput
}

input ProjectUpdateWithWhereUniqueWithoutAdminInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutAdminDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutMemberInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutMemberDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutTeamInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutTeamDataInput!
}

input ProjectUpsertWithoutChangeInput {
  update: ProjectUpdateWithoutChangeDataInput!
  create: ProjectCreateWithoutChangeInput!
}

input ProjectUpsertWithWhereUniqueWithoutAdminInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutAdminDataInput!
  create: ProjectCreateWithoutAdminInput!
}

input ProjectUpsertWithWhereUniqueWithoutMemberInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutMemberDataInput!
  create: ProjectCreateWithoutMemberInput!
}

input ProjectUpsertWithWhereUniqueWithoutTeamInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutTeamDataInput!
  create: ProjectCreateWithoutTeamInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  team: TeamWhereInput
  member_every: UserWhereInput
  member_some: UserWhereInput
  member_none: UserWhereInput
  admin_every: UserWhereInput
  admin_some: UserWhereInput
  admin_none: UserWhereInput
  change_every: ChangeWhereInput
  change_some: ChangeWhereInput
  change_none: ChangeWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  changes(where: ChangeWhereInput, orderBy: ChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Change]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  project(where: ProjectWhereUniqueInput!): Project
  change(where: ChangeWhereUniqueInput!): Change
  user(where: UserWhereUniqueInput!): User
  team(where: TeamWhereUniqueInput!): Team
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  changesConnection(where: ChangeWhereInput, orderBy: ChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChangeConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  node(id: ID!): Node
}

type Subscription {
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  change(where: ChangeSubscriptionWhereInput): ChangeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  name: String
  project: ProjectCreateManyWithoutTeamInput
  owner: UserCreateOneWithoutTeamOwnerInput!
  admin: UserCreateManyWithoutTeamAdminInput
  member: UserCreateManyWithoutTeamMemberInput
}

input TeamCreateManyWithoutAdminInput {
  create: [TeamCreateWithoutAdminInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateManyWithoutMemberInput {
  create: [TeamCreateWithoutMemberInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateManyWithoutOwnerInput {
  create: [TeamCreateWithoutOwnerInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateOneWithoutProjectInput {
  create: TeamCreateWithoutProjectInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutAdminInput {
  name: String
  project: ProjectCreateManyWithoutTeamInput
  owner: UserCreateOneWithoutTeamOwnerInput!
  member: UserCreateManyWithoutTeamMemberInput
}

input TeamCreateWithoutMemberInput {
  name: String
  project: ProjectCreateManyWithoutTeamInput
  owner: UserCreateOneWithoutTeamOwnerInput!
  admin: UserCreateManyWithoutTeamAdminInput
}

input TeamCreateWithoutOwnerInput {
  name: String
  project: ProjectCreateManyWithoutTeamInput
  admin: UserCreateManyWithoutTeamAdminInput
  member: UserCreateManyWithoutTeamMemberInput
}

input TeamCreateWithoutProjectInput {
  name: String
  owner: UserCreateOneWithoutTeamOwnerInput!
  admin: UserCreateManyWithoutTeamAdminInput
  member: UserCreateManyWithoutTeamMemberInput
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type TeamPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
}

input TeamUpdateInput {
  name: String
  project: ProjectUpdateManyWithoutTeamInput
  owner: UserUpdateOneWithoutTeamOwnerInput
  admin: UserUpdateManyWithoutTeamAdminInput
  member: UserUpdateManyWithoutTeamMemberInput
}

input TeamUpdateManyWithoutAdminInput {
  create: [TeamCreateWithoutAdminInput!]
  connect: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  delete: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutAdminInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutAdminInput!]
}

input TeamUpdateManyWithoutMemberInput {
  create: [TeamCreateWithoutMemberInput!]
  connect: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  delete: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutMemberInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutMemberInput!]
}

input TeamUpdateManyWithoutOwnerInput {
  create: [TeamCreateWithoutOwnerInput!]
  connect: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  delete: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutOwnerInput!]
}

input TeamUpdateOneWithoutProjectInput {
  create: TeamCreateWithoutProjectInput
  connect: TeamWhereUniqueInput
  delete: Boolean
  update: TeamUpdateWithoutProjectDataInput
  upsert: TeamUpsertWithoutProjectInput
}

input TeamUpdateWithoutAdminDataInput {
  name: String
  project: ProjectUpdateManyWithoutTeamInput
  owner: UserUpdateOneWithoutTeamOwnerInput
  member: UserUpdateManyWithoutTeamMemberInput
}

input TeamUpdateWithoutMemberDataInput {
  name: String
  project: ProjectUpdateManyWithoutTeamInput
  owner: UserUpdateOneWithoutTeamOwnerInput
  admin: UserUpdateManyWithoutTeamAdminInput
}

input TeamUpdateWithoutOwnerDataInput {
  name: String
  project: ProjectUpdateManyWithoutTeamInput
  admin: UserUpdateManyWithoutTeamAdminInput
  member: UserUpdateManyWithoutTeamMemberInput
}

input TeamUpdateWithoutProjectDataInput {
  name: String
  owner: UserUpdateOneWithoutTeamOwnerInput
  admin: UserUpdateManyWithoutTeamAdminInput
  member: UserUpdateManyWithoutTeamMemberInput
}

input TeamUpdateWithWhereUniqueWithoutAdminInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutAdminDataInput!
}

input TeamUpdateWithWhereUniqueWithoutMemberInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutMemberDataInput!
}

input TeamUpdateWithWhereUniqueWithoutOwnerInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutOwnerDataInput!
}

input TeamUpsertWithoutProjectInput {
  update: TeamUpdateWithoutProjectDataInput!
  create: TeamCreateWithoutProjectInput!
}

input TeamUpsertWithWhereUniqueWithoutAdminInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutAdminDataInput!
  create: TeamCreateWithoutAdminInput!
}

input TeamUpsertWithWhereUniqueWithoutMemberInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutMemberDataInput!
  create: TeamCreateWithoutMemberInput!
}

input TeamUpsertWithWhereUniqueWithoutOwnerInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutOwnerDataInput!
  create: TeamCreateWithoutOwnerInput!
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  project_every: ProjectWhereInput
  project_some: ProjectWhereInput
  project_none: ProjectWhereInput
  owner: UserWhereInput
  admin_every: UserWhereInput
  admin_some: UserWhereInput
  admin_none: UserWhereInput
  member_every: UserWhereInput
  member_some: UserWhereInput
  member_none: UserWhereInput
}

input TeamWhereUniqueInput {
  id: ID
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  TeamOwner: TeamCreateManyWithoutOwnerInput
  TeamAdmin: TeamCreateManyWithoutAdminInput
  TeamMember: TeamCreateManyWithoutMemberInput
  projectMember: ProjectCreateManyWithoutMemberInput
  projectAdmin: ProjectCreateManyWithoutAdminInput
}

input UserCreateManyWithoutProjectAdminInput {
  create: [UserCreateWithoutProjectAdminInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutProjectMemberInput {
  create: [UserCreateWithoutProjectMemberInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTeamAdminInput {
  create: [UserCreateWithoutTeamAdminInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTeamMemberInput {
  create: [UserCreateWithoutTeamMemberInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTeamOwnerInput {
  create: UserCreateWithoutTeamOwnerInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProjectAdminInput {
  email: String!
  password: String!
  name: String!
  TeamOwner: TeamCreateManyWithoutOwnerInput
  TeamAdmin: TeamCreateManyWithoutAdminInput
  TeamMember: TeamCreateManyWithoutMemberInput
  projectMember: ProjectCreateManyWithoutMemberInput
}

input UserCreateWithoutProjectMemberInput {
  email: String!
  password: String!
  name: String!
  TeamOwner: TeamCreateManyWithoutOwnerInput
  TeamAdmin: TeamCreateManyWithoutAdminInput
  TeamMember: TeamCreateManyWithoutMemberInput
  projectAdmin: ProjectCreateManyWithoutAdminInput
}

input UserCreateWithoutTeamAdminInput {
  email: String!
  password: String!
  name: String!
  TeamOwner: TeamCreateManyWithoutOwnerInput
  TeamMember: TeamCreateManyWithoutMemberInput
  projectMember: ProjectCreateManyWithoutMemberInput
  projectAdmin: ProjectCreateManyWithoutAdminInput
}

input UserCreateWithoutTeamMemberInput {
  email: String!
  password: String!
  name: String!
  TeamOwner: TeamCreateManyWithoutOwnerInput
  TeamAdmin: TeamCreateManyWithoutAdminInput
  projectMember: ProjectCreateManyWithoutMemberInput
  projectAdmin: ProjectCreateManyWithoutAdminInput
}

input UserCreateWithoutTeamOwnerInput {
  email: String!
  password: String!
  name: String!
  TeamAdmin: TeamCreateManyWithoutAdminInput
  TeamMember: TeamCreateManyWithoutMemberInput
  projectMember: ProjectCreateManyWithoutMemberInput
  projectAdmin: ProjectCreateManyWithoutAdminInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  password: String
  name: String
  TeamOwner: TeamUpdateManyWithoutOwnerInput
  TeamAdmin: TeamUpdateManyWithoutAdminInput
  TeamMember: TeamUpdateManyWithoutMemberInput
  projectMember: ProjectUpdateManyWithoutMemberInput
  projectAdmin: ProjectUpdateManyWithoutAdminInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  TeamOwner: TeamUpdateManyWithoutOwnerInput
  TeamAdmin: TeamUpdateManyWithoutAdminInput
  TeamMember: TeamUpdateManyWithoutMemberInput
  projectMember: ProjectUpdateManyWithoutMemberInput
  projectAdmin: ProjectUpdateManyWithoutAdminInput
}

input UserUpdateManyWithoutProjectAdminInput {
  create: [UserCreateWithoutProjectAdminInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProjectAdminInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProjectAdminInput!]
}

input UserUpdateManyWithoutProjectMemberInput {
  create: [UserCreateWithoutProjectMemberInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProjectMemberInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProjectMemberInput!]
}

input UserUpdateManyWithoutTeamAdminInput {
  create: [UserCreateWithoutTeamAdminInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeamAdminInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeamAdminInput!]
}

input UserUpdateManyWithoutTeamMemberInput {
  create: [UserCreateWithoutTeamMemberInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeamMemberInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeamMemberInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutTeamOwnerInput {
  create: UserCreateWithoutTeamOwnerInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutTeamOwnerDataInput
  upsert: UserUpsertWithoutTeamOwnerInput
}

input UserUpdateWithoutProjectAdminDataInput {
  email: String
  password: String
  name: String
  TeamOwner: TeamUpdateManyWithoutOwnerInput
  TeamAdmin: TeamUpdateManyWithoutAdminInput
  TeamMember: TeamUpdateManyWithoutMemberInput
  projectMember: ProjectUpdateManyWithoutMemberInput
}

input UserUpdateWithoutProjectMemberDataInput {
  email: String
  password: String
  name: String
  TeamOwner: TeamUpdateManyWithoutOwnerInput
  TeamAdmin: TeamUpdateManyWithoutAdminInput
  TeamMember: TeamUpdateManyWithoutMemberInput
  projectAdmin: ProjectUpdateManyWithoutAdminInput
}

input UserUpdateWithoutTeamAdminDataInput {
  email: String
  password: String
  name: String
  TeamOwner: TeamUpdateManyWithoutOwnerInput
  TeamMember: TeamUpdateManyWithoutMemberInput
  projectMember: ProjectUpdateManyWithoutMemberInput
  projectAdmin: ProjectUpdateManyWithoutAdminInput
}

input UserUpdateWithoutTeamMemberDataInput {
  email: String
  password: String
  name: String
  TeamOwner: TeamUpdateManyWithoutOwnerInput
  TeamAdmin: TeamUpdateManyWithoutAdminInput
  projectMember: ProjectUpdateManyWithoutMemberInput
  projectAdmin: ProjectUpdateManyWithoutAdminInput
}

input UserUpdateWithoutTeamOwnerDataInput {
  email: String
  password: String
  name: String
  TeamAdmin: TeamUpdateManyWithoutAdminInput
  TeamMember: TeamUpdateManyWithoutMemberInput
  projectMember: ProjectUpdateManyWithoutMemberInput
  projectAdmin: ProjectUpdateManyWithoutAdminInput
}

input UserUpdateWithWhereUniqueWithoutProjectAdminInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProjectAdminDataInput!
}

input UserUpdateWithWhereUniqueWithoutProjectMemberInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProjectMemberDataInput!
}

input UserUpdateWithWhereUniqueWithoutTeamAdminInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTeamAdminDataInput!
}

input UserUpdateWithWhereUniqueWithoutTeamMemberInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTeamMemberDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutTeamOwnerInput {
  update: UserUpdateWithoutTeamOwnerDataInput!
  create: UserCreateWithoutTeamOwnerInput!
}

input UserUpsertWithWhereUniqueWithoutProjectAdminInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProjectAdminDataInput!
  create: UserCreateWithoutProjectAdminInput!
}

input UserUpsertWithWhereUniqueWithoutProjectMemberInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProjectMemberDataInput!
  create: UserCreateWithoutProjectMemberInput!
}

input UserUpsertWithWhereUniqueWithoutTeamAdminInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTeamAdminDataInput!
  create: UserCreateWithoutTeamAdminInput!
}

input UserUpsertWithWhereUniqueWithoutTeamMemberInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTeamMemberDataInput!
  create: UserCreateWithoutTeamMemberInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  TeamOwner_every: TeamWhereInput
  TeamOwner_some: TeamWhereInput
  TeamOwner_none: TeamWhereInput
  TeamAdmin_every: TeamWhereInput
  TeamAdmin_some: TeamWhereInput
  TeamAdmin_none: TeamWhereInput
  TeamMember_every: TeamWhereInput
  TeamMember_some: TeamWhereInput
  TeamMember_none: TeamWhereInput
  projectMember_every: ProjectWhereInput
  projectMember_some: ProjectWhereInput
  projectMember_none: ProjectWhereInput
  projectAdmin_every: ProjectWhereInput
  projectAdmin_some: ProjectWhereInput
  projectAdmin_none: ProjectWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
